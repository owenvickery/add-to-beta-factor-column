import os, sys
import numpy as np
from subprocess import Popen, PIPE
import subprocess, shlex
from time import gmtime, strftime
import math
import multiprocessing as mp
import argparse
import copy
from shutil import copyfile
from distutils.dir_util import copy_tree
import time
# from numba import njit, jit
from string import ascii_uppercase
from pathlib import Path
import re
import datetime
import random


##### 
# reads in 2 column file and adds 2nd column to pdb beta factor column





parser = argparse.ArgumentParser(description='Converts CG representation into atomistic', epilog='Enjoy the program and best of luck!', allow_abbrev=True)
parser.add_argument('-c', help='coarse grain coordinates',metavar='pdb/gro',type=str)
parser.add_argument('-i', help='additional fragment library location',metavar='fragments folder',type=str)
args = parser.parse_args()
options = vars(args)


def pdbatom(line):
### get information from pdb file
### atom number, atom name, residue name,chain, resid,  x, y, z, backbone (for fragment), connect(for fragment)
	try:
		return dict([('atom_number',str(line[7:11]).replace(" ", "")),('atom_name',str(line[12:16]).replace(" ", "")),('residue_name',str(line[17:21]).replace(" ", "")),('chain',line[21]),('residue_id',int(line[22:26])), ('x',float(line[30:38])),('y',float(line[38:46])),('z',float(line[46:54])), ('backbone',int(float(line[56:62]))),('connect',int(float(line[62:67])))])
	except:
		sys.exit('\npdb line is wrong:\t'+line) 

def create_pdb(file_name):
	pdb_output = open(file_name, 'w')
	pdb_output.write('REMARK    GENERATED BY sys_setup_script\nTITLE     SELF-ASSEMBLY-MAYBE\nREMARK    Good luck\n\
'+box_vec+'MODEL        1\n')
	return pdb_output




atoms={}
with open(args.c, 'r') as pdb_input:
	resid_prev = 0
	for line_nr, line in enumerate(pdb_input.readlines()):
		if line.startswith('CRYST'): ### collects box vectors from pdb
			box_vec=line
		if line.startswith('ATOM'):
			line_sep = pdbatom(line)
			if line_sep['residue_id'] != resid_prev:
				if 'resid' not in locals():
					resid =0
				else:
					resid +=1
				atoms[resid]={}
				resid_prev=line_sep['residue_id']
			atoms[resid][line_sep['atom_number']]=line_sep

with open(args.l, 'r') as xvg_input:
	xvg=[]
	for line_nr, line in enumerate(xvg_input.readlines()):
		if len(line) > 0:
			if line[0] not in ['@','#']:
				xvg.append(float(line.split()[1]))
print(len(atoms), len(xvg))

pdb_output = create_pdb(args.i[:-4]+'.pdb')
pdbline = "ATOM  %5d %4s %4s%1s%4d    %8.3f%8.3f%8.3f%6.2f%6.2f"
for resid, residue in enumerate(atoms):
	for at in atoms[residue]:
		pdb_output.write(pdbline%((int(at),atoms[residue][at]['atom_name'],atoms[residue][at]['residue_name'],' ',atoms[residue][at]['residue_id'],\
atoms[residue][at]['x'],atoms[residue][at]['y'],atoms[residue][at]['z'],1,xvg[resid]))+'\n')
